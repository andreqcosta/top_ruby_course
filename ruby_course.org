* How This Course Will Work
https://www.theodinproject.com/lessons/ruby-how-this-course-will-work  

https://ruby-doc.org/

* Installing Ruby
** install rbenv
https://github.com/rbenv/rbenv
- on arch instal install rbenv from AUR
- put this on zshrc or bashrc
  + echo 'eval "$(~/.rbenv/bin/rbenv init - zsh)"' >> ~/.zshrc
  + echo 'eval "$(~/.rbenv/bin/rbenv init - bash)"' >> ~/.bashrc
  + echo 'eval "$(~/.rbenv/bin/rbenv init - bash)"' >> ~/.bash_profile
- rbenv install -l
  rbenv install 3.1.2
- rbenv global 3.1.2
  
* Basic Data Types
** string
*** concat
#+begin_src ruby
  # With the plus operator:
  "Welcome " + "to " + "Odin!"    #=> "Welcome to Odin!"

  # With the shovel operator:
  "Welcome " << "to " << "Odin!"  #=> "Welcome to Odin!"

  # With the concat method:
  "Welcome ".concat("to ").concat("Odin!")  #=> "Welcome to Odin!"
#+end_src

*** substrings
#+begin_src ruby
  "hello"[0]      #=> "h"

  "hello"[0..1]   #=> "he"

  "hello"[0, 4]   #=> "hell"

  "hello"[-1]     #=> "o"
#+end_src

*** common methods
#+begin_src ruby
  #capitalize

  "hello".capitalize #=> "Hello"
  #include?

  "hello".include?("lo")  #=> true

  "hello".include?("z")   #=> false
  #upcase

  "hello".upcase  #=> "HELLO"
  #downcase

  "Hello".downcase  #=> "hello"
  #empty?

  "hello".empty?  #=> false

  "".empty?       #=> true
  #length

  "hello".length  #=> 5
  #reverse

  "hello".reverse  #=> "olleh"
  #split

  "hello world".split  #=> ["hello", "world"]

  "hello".split("")    #=> ["h", "e", "l", "l", "o"]
  #strip

  " hello, world   ".strip  #=> "hello, world"

  #modify string

  "he77o".sub("7", "l")           #=> "hel7o"

  "he77o".gsub("7", "l")          #=> "hello"

  "hello".insert(-1, " dude")     #=> "hello dude"

  "hello world".delete("l")       #=> "heo word"

  "!".prepend("hello, ", "world") #=> "hello, world!"
#+end_src

* Variables
https://www.theodinproject.com/lessons/ruby-variables
https://launchschool.com/books/ruby/read/variables
#+begin_src ruby
  age = 18
  age += 4 #=> 22

  age = 18
  age -= 2  #=> 16

  cash = 10
  cash *= 2 #=> 20

  temperature = 40
  temperature /= 10 #=> 4
#+end_src

** naming
#+begin_src ruby
  # bad
  a = 19
  string = "John"

  # good
  age = 19
  name = "John"
  can_swim = false
#+end_src

** Variables are References
The information you name with a variable is stored in memory on your computer, so a variable is effectively a reference or a pointer to that address in memory. This is important to know as it can sometimes be the cause of unexpected behavior from your code.

** Types of Variables
#+begin_src ruby
  MY_CONSTANT = 'I am available throughout your app.'
  $var = 'I am also available throughout your app.'
  @@instances = 0
  @var = 'I am available throughout the current instance of this class.'
  var = 'I must be passed around to cross scope boundaries.'
#+end_src

* Input And Output
https://www.theodinproject.com/lessons/ruby-input-and-output

* Conditional Logic
https://www.theodinproject.com/lessons/ruby-conditional-logic
https://launchschool.com/books/ruby/read/flow_control#conditionals
#+begin_src ruby
  5.eql?(5.0) #=> false; although they are the same value, one is an integer and the other is a float
  5.eql?(5)   #=> true

  a = 5
  b = 5
  a.equal?(b) #=> true

  a = "hello"
  b = "hello"
  a.equal?(b) #=> false

  5 <=> 10    #=> -1
  10 <=> 10   #=> 0
  10 <=> 5    #=> 1
#+end_src

** case
#+begin_src ruby
  grade = 'F'

  did_i_pass = case grade #=> create a variable `did_i_pass` and assign the result of a call to case with the variable grade passed in
	       when 'A' then "Hell yeah!"
	       when 'D' then "Don't tell your mother."
	       else "'YOU SHALL NOT PASS!' -Gandalf"
	       end

#+end_src

#+begin_src ruby
  grade = 'F'

  case grade
  when 'A'
    puts "You're a genius"
    future_bank_account_balance = 5_000_000
  when 'D'
    puts "Better luck next time"
    can_i_retire_soon = false
  else
    puts "'YOU SHALL NOT PASS!' -Gandalf"
    fml = true
  end
#+end_src

* Loops
https://www.theodinproject.com/lessons/ruby-loops
https://launchschool.com/books/ruby/read/loops_iterators

** loop
#+begin_src ruby
  i = 0
  loop do
    puts "i is #{i}"
    i += 1
    break if i == 10
  end
#+end_src

** do/while
#+begin_src ruby
  begin
    puts "Do you want to do that again?"
    answer = gets.chomp
  end while answer == 'Y'
#+end_src

** while
#+begin_src ruby
  i = 0
  while i < 10 do
    puts "i is #{i}"
    i += 1
  end
#+end_src

#+begin_src ruby
  while gets.chomp != "yes" do
    puts "Will you go to prom with me?"
  end
#+end_src

** until
#+begin_src ruby
  i = 0
  until i >= 10 do
    puts "i is #{i}"
    i += 1
  end
#+end_src

#+RESULTS:
: nil

#+begin_src ruby
  until gets.chomp == "yes" do
    puts "Do you like Pizza?"
  end
#+end_src

** times
#+begin_src ruby
  5.times do
    puts "Hello, world!"
  end

  5.times do
    puts "Hello, world!"
  end
#+end_src

** upto and downto
#+begin_src ruby
  5.upto(10) {|num| print "#{num} " }     #=> 5 6 7 8 9 10

  10.downto(5) {|num| print "#{num} " }   #=> 10 9 8 7 6 5
#+end_src

* Array
https://www.theodinproject.com/lessons/ruby-arrays
** creating
#+begin_src ruby
  num_array = [1, 2, 3, 4, 5]
  str_array = ["This", "is", "a", "small", "array"]

  Array.new               #=> []
  Array.new(3)            #=> [nil, nil, nil]
  Array.new(3, 7)         #=> [7, 7, 7]
  Array.new(3, true)      #=> [true, true, true]
#+end_src

** accessing elements
#+begin_src ruby
  str_array = ["This", "is", "a", "small", "array"]

  str_array[0]            #=> "This"
  str_array[1]            #=> "is"
  str_array[4]            #=> "array"
  str_array[-1]           #=> "array"
  str_array[-2]           #=> "small"

  str_array = ["This", "is", "a", "small", "array"]

  str_array.first         #=> "This"
  str_array.first(2)      #=> ["This", "is"]
  str_array.last(2)       #=> ["small", "array"]
#+end_src

** adding and removing elements
#+begin_src ruby
  num_array = [1, 2]

  num_array.push(3, 4)      #=> [1, 2, 3, 4]
  num_array << 5            #=> [1, 2, 3, 4, 5]
  num_array.pop             #=> 5
  num_array                 #=> [1, 2, 3, 4]
#+end_src

#+begin_src ruby
  num_array = [2, 3, 4]

  num_array.unshift(1)      #=> [1, 2, 3, 4]
  num_array.shift           #=> 1
  num_array                 #=> [2, 3, 4]
#+end_src

#+begin_src ruby
  num_array = [1, 2, 3, 4, 5, 6]

  num_array.pop(3)          #=> [4, 5, 6]
  num_array.shift(2)        #=> [1, 2]
  num_array  
#+end_src

** adding and subtracting arrays
#+begin_src ruby
  a = [1, 2, 3]
  b = [3, 4, 5]

  a + b         #=> [1, 2, 3, 3, 4, 5]
  a.concat(b)   #=> [1, 2, 3, 3, 4, 5]
#+end_src

#+begin_src ruby
  [1, 1, 1, 2, 2, 3, 4] - [1, 4]  #=> [2, 2, 3]
#+end_src

** basic array methods
#+begin_src ruby
  [].empty?               #=> true
  [[]].empty?             #=> false
  [1, 2].empty?           #=> false

  [1, 2, 3].length        #=> 3

  [1, 2, 3].reverse       #=> [3, 2, 1]

  [1, 2, 3].include?(3)   #=> true
  [1, 2, 3].include?("3") #=> false

  [1, 2, 3].join          #=> "123"
  [1, 2, 3].join("-")     #=> "1-2-3"
#+end_src

* Hash
https://www.theodinproject.com/lessons/ruby-hashes
https://launchschool.com/books/ruby/read/hashes
** creating hashes
#+begin_src ruby
  my_hash = {
    "a random word" => "ahoy",
    "Dorothy's math test score" => 94,
    "an array" => [1, 2, 3],
    "an empty hash within a hash" => {}
  }
#+end_src

#+begin_src ruby
  my_hash = Hash.new
  my_hash               #=> {}

  hash = { 9 => "nine", :six => 6 }
#+end_src

** accessing values
#+begin_src ruby
  shoes = {
    "summer" => "sandals",
    "winter" => "boots"
  }

  shoes["summer"]   #=> "sandals"

  shoes["hiking"]   #=> nil

  shoes.fetch("hiking")   #=> KeyError: key not found: "hiking"

  shoes.fetch("hiking", "hiking boots") #=> "hiking boots"
#+end_src

** adding and changing data
#+begin_src ruby
  shoes["fall"] = "sneakers"

  shoes     #=> {"summer"=>"sandals", "winter"=>"boots", "fall"=>"sneakers"}

  shoes["summer"] = "flip-flops"
  shoes     #=> {"summer"=>"flip-flops", "winter"=>"boots", "fall"=>"sneakers"}
#+end_src

** removing data
#+begin_src ruby
  shoes.delete("summer")    #=> "flip-flops"
  shoes                     #=> {"winter"=>"boots", "fall"=>"sneakers"}
#+end_src

** methods
#+begin_src ruby
  books = {
    "Infinite Jest" => "David Foster Wallace",
    "Into the Wild" => "Jon Krakauer"
  }

  books.keys      #=> ["Infinite Jest", "Into the Wild"]
  books.values    #=> ["David Foster Wallace", "Jon Krakauer"]

#+end_src

** merging two hashes
#+begin_src ruby
  hash1 = { "a" => 100, "b" => 200 }
  hash2 = { "b" => 254, "c" => 300 }
  hash1.merge(hash2)      #=> { "a" => 100, "b" => 254, "c" => 300 }
#+end_src

** symbols and hash keys
#+begin_src ruby
  # 'Rocket' syntax
  american_cars = {
    :chevrolet => "Corvette",
    :ford => "Mustang",
    :dodge => "Ram"
  }
  # 'Symbols' syntax
  japanese_cars = {
    honda: "Accord",
    toyota: "Corolla",
    nissan: "Altima"
  }

  american_cars[:ford]    #=> "Mustang"
  japanese_cars[:honda]   #=> "Accord"
#+end_src

* Mehtods
https://www.theodinproject.com/lessons/ruby-methods
** chaining methods
#+begin_src ruby
  phrase = ["be", "to", "not", "or", "be", "to"]

  puts phrase.reverse.join(" ").capitalize
  #=> "To be or not to be"

  ["be", "to", "not", "or", "be", "to"].reverse
  = ["to", "be", "or", "not", "to", "be"].join(" ")
  = "to be or not to be".capitalize
  = "To be or not to be"
#+end_src

** predicate methods
You will sometimes encounter built-in Ruby methods that have a question mark (?) at the end of their name, such as even?, odd?, or between?. These are all predicate methods, which is a naming convention that Ruby uses for methods that return a Boolean, that is, they return either true or false.
#+begin_src ruby
  puts 5.even?  #=> false
  puts 6.even?  #=> true
  puts 17.odd?  #=> true

  puts 12.between?(10, 15)  #=> true
#+end_src

** bang methods
#+begin_src ruby
  whisper = "HELLO EVERYBODY"

  puts whisper.downcase #=> "hello everybody"
  puts whisper #=> "HELLO EVERYBODY"

  puts whisper.downcase! #=> "hello everybody"
  puts whisper #=> "hello everybody"
#+end_src

* Debugging
https://www.theodinproject.com/lessons/ruby-debugging
https://github.com/deivid-rodriguez/pry-byebug
** pry-byebug
#+begin_src ruby :tangle prybue.rb
  require 'pry-byebug'

  def isogram?(string)
    original_length = string.length
    string_array = string.downcase.split

    binding.pry

    unique_length = string_array.uniq.length
    original_length == unique_length
  end

  isogram?("Odin")
#+end_src

#+RESULTS:
: false
#+begin_src 
[1] pry(main)> name
=> "bob"
[2] pry(main)> greeting
=> nil
[3] pry(main)> next

     5: def yell_greeting(string)
     6:   name = string
     7:
     8:   binding.pry
     9:
    10:   name = name.upcase
 => 11:   greeting = "WASSAP, #{name}!"
    12:   puts greeting
    13: end

[4] pry(main)> name
=> "BOB"
#+end_src

* Basic Enumerable Methods
https://www.theodinproject.com/lessons/ruby-basic-enumerable-methods

#+begin_src ruby
  fruits = ["apple", "banana", "strawberry", "pineapple"]

  fruits.each_with_index { |fruit, index| puts fruit if index.even? }

  #=> apple
  #=> strawberry
  #=> ["apple", "banana", "strawberry", "pineapple"]
#+end_src

#+begin_src ruby
  votes = ["Bob's Dirty Burger Shack", "St. Mark's Bistro", "Bob's Dirty Burger Shack"]

  votes.reduce(Hash.new(0)) do |result, vote|
    result[vote] += 1
    result
  end
  #=> {"Bob's Dirty Burger Shack"=>2, "St. Mark's Bistro"=>1}
#+end_src

* Object Oriented Programming
https://www.theodinproject.com/lessons/ruby-object-oriented-programming
https://launchschool.com/books/oo_ruby/read/the_object_model

https://opensource.guide/how-to-contribute/#why-contribute-to-open-source

https://www.eriktrautman.com/posts/ruby-explained-classes

http://ruby.bastardsbook.com/chapters/exception-handling/
http://regex.bastardsbook.com/

https://rubystyle.guide/

- Encapsulation
- Polymorphism
- inheritance

.class return class

** Module (mixins)
#+begin_src ruby
  module Speak
    def speak(sound)
      puts sound
    end
  end

  class GoodDog
    include Speak
  end

  class HumanBeing
    include Speak
  end

  sparky = GoodDog.new
  sparky.speak("Arf!")        # => Arf!
  bob = HumanBeing.new
  bob.speak("Hello!")         # => Hello!
#+end_src

.ancestors see parents

When you start solving larger problems organization is key. You don't want 100 different methods and variables that do overlapping things. If you're trying to keep track of data (like a bunch of bad guys in a game you're building), you want to do so in the most organized way possible so you can recycle methods and only need to update that data in one place at a time.


#+begin_src ruby
  def health
    @health
  end

  def health=(new_health)
    @health = new_health
  end

  class Viking
    attr_accessor :name, :age, :health, :strength
    # codecodecode
  end  
#+end_src

self
#+begin_src ruby
  class Viking
	...
	def take_damage(damage)
	  self.health -= damage
	  # OR we could have said @health -= damage
	  self.shout("OUCH!")
	end
    def shout(str)
      puts str
    end
    ...
  end
#+end_src


class variable
#+begin_src ruby
  class Viking
    @@starting_health
    def initialize(name, age, strength)
      @health = @@starting_health
      # ...other stuff
    end
  end
#+end_src


factory method
#+begin_src ruby
  class Viking
    def initialize(name, health, age, strength)
      #... set variables
    end
    def self.create_warrior(name)
      age = rand * 20 + 15   # remember, rand gives a random 0 to 1
      health = [age * 5, 120].min
      strength = [age / 2, 10].min
      Viking.new(name, health, age, strength)  # returned
    end
  end

  sten = Viking.create_warrior("Sten")
#+end_src

#+begin_src ruby
  class Viking
	...
	def self.random_name      # useful for making new warriors!
	  ["Erik","Lars","Leif"].sample
	end
    def self.silver_to_gold(silver_pieces)
      silver_pieces / 10
    end
    class << self           # The less common way
      def gold_to_silver(gold_pieces)
	gold_pieces * 10
      end
    end
  end

  warrior1 = Viking.create_warrior(Viking.random_name)

#+end_src

#+begin_src ruby
  class Person
    MAX_HEALTH = 120
		 ...
		 def heal
		   self.health += 1 unless self.health + 1 > MAX_HEALTH
		 end
  end

  class Viking < Person
	...
	def heal
	  self.health = [self.health + 2, MAX_HEALTH].min
	  puts "Ready for battle!"
	end
  end

  class Viking < Person
	...
	def heal
	  2.times { super }
	  puts "Ready for battle!"
	end
  end

  class Viking < Person
    def initialize(name, health, age, strength, weapon)
      super(name, health, age, strength)
      @weapon = weapon
    end
  end
#+end_src

#+begin_src ruby
  class Viking < Person
	...
	def take_damage(damage)
	  @health -= damage
	  die if @health <= 0
	end
    private
    def die
      puts "#{self.name} has been killed :("
      self.dead = true    # assume we've defined a `dead` instance variable
    end
  end

  > oleg = Viking.create_warrior("Oleg")
  > oleg.die
  NoMethodError: private method `die' called for #<Viking:0x007ffd4c041e50>
  > oleg.take_damage(200)
  Oleg has been killed :(
  => true
#+end_src

You should change the default thought in your head from "everything is accessible, what do I need to hide?" to "everything should be hidden, what do I absolutely need to make externally available?" That principle will take you far, especially when designing things like APIs that will be used by other programs. The more you make available to people, the harder it will be later on to hide it again.

#+begin_src ruby
  class Viking < Person
	...
	def attack(recipient)
	  if recipient.dead
	    puts "#{recipient.name} is already dead!"
	    return false
	  end
	  damage = (rand * 10 + 10).round(0)
	  recipient.take_damage(damage)  # `take_damage` called on `recipient`!
	end
    protected
    def take_damage(damage)
      self.health -= damage
      puts "Ouch! #{self.name} took #{damage} damage and has #{self.health} health left"
      die if @health <= 0  
      # `die` called from within the same object as take_damage was (the `recipient` as well!)
    end
    private
    def die
      puts "#{self.name} has been killed :("
      self.dead = true  # assume we've defined a `dead` instance variable
    end
  end

  > oleg = Viking.create_warrior("Oleg")
  => #<Viking:0x007ffd4b8b5588 @age=24.58111251562904, @name="Oleg", @health=120, @strength=10, @dead=false> 
  > sten = Viking.create_warrior("Sten")
  => #<Viking:0x007ffd4b8e1700 @age=28.80998656037281, @name="Sten", @health=120, @strength=10, @dead=false> 
  > 10.times { oleg.attack(sten) }
  Ouch! Sten took 19 damage and has 101 health left
  Ouch! Sten took 10 damage and has 91 health left
  Ouch! Sten took 13 damage and has 78 health left
  Ouch! Sten took 17 damage and has 61 health left
  Ouch! Sten took 15 damage and has 46 health left
  Ouch! Sten took 11 damage and has 35 health left
  Ouch! Sten took 14 damage and has 21 health left
  Ouch! Sten took 14 damage and has 7 health left
  Ouch! Sten took 18 damage and has -11 health left
  Sten has been killed :(
			   Sten is already dead!
			   => 10 
			   > sten
			   => #<Viking:0x007ffd4c048840 @age=25.601709008134428, @name="Sten", @health=-11, @strength=10, @dead=true>
#+end_src


rescue
#+begin_src ruby
  a = 10
  b = "42"

  begin
    a + b
  rescue
    puts "Could not add variables a (#{a.class}) and b (#{b.class})"
  else
    puts "a + b is #{a + b}"
  end

#+end_src

